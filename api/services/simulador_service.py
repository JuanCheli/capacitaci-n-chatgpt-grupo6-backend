from typing import Dict, Any, List, Optional
import asyncio
import logging
from ..config.config import settings

# Importar SDK de Google Generative AI
try:
    import google.generativeai as genai
    GENAI_AVAILABLE = True
except ImportError:
    GENAI_AVAILABLE = False
    genai = None

logger = logging.getLogger(__name__)

# Configurar cliente de Gemini si la API key est√° disponible
_gemini_model = None

def _initialize_gemini():
    """Inicializa el modelo de Gemini si no est√° configurado"""
    global _gemini_model
    
    if not GENAI_AVAILABLE:
        logger.warning("google-generativeai no est√° instalado. Usando modo simulaci√≥n.")
        return None
    
    if not settings.GEMINI_API_KEY:
        logger.info("GEMINI_API_KEY no configurada. Usando modo simulaci√≥n.")
        return None
    
    if _gemini_model is None:
        try:
            genai.configure(api_key=settings.GEMINI_API_KEY)
            _gemini_model = genai.GenerativeModel(settings.GEMINI_MODEL)
            logger.info(f"‚úÖ Cliente Gemini inicializado con modelo: {settings.GEMINI_MODEL}")
        except Exception as e:
            logger.error(f"‚ùå Error al inicializar Gemini: {e}")
            return None
    
    return _gemini_model


async def chat_simulate(prompt: str) -> Dict[str, Any]:
    """Simula el env√≠o de un prompt a Gemini.
    Si GEMINI_API_KEY est√° configurado, realiza la llamada real a la API.
    Si no, devuelve una respuesta simulada para prop√≥sitos de capacitaci√≥n.
    """
    if not prompt or not prompt.strip():
        return {"error": "El prompt est√° vac√≠o"}

    # Intentar usar Gemini real si est√° configurado
    model = _initialize_gemini()
    
    if model is not None:
        try:
            # Llamada real a Gemini API con instrucciones para respuestas breves
            logger.info(f"Enviando prompt a Gemini: {prompt[:50]}...")
            
            # Agregar instrucciones de sistema para respuestas breves
            # El chat es para PR√ÅCTICA LIBRE, puede hablar de cualquier tema
            enhanced_prompt = f"""Eres un asistente amigable y √∫til. Puedes ayudar con cualquier tema que el usuario necesite.

IMPORTANTE: 
- Da respuestas BREVES y CLARAS (m√°ximo 3-4 p√°rrafos)
- Usa lenguaje SIMPLE y accesible
- Si explicas conceptos t√©cnicos, usa ejemplos cotidianos
- S√© paciente y alentador

Pregunta del usuario:
{prompt}"""
            
            # Generar respuesta de forma as√≠ncrona
            response = await asyncio.to_thread(
                lambda: model.generate_content(enhanced_prompt)
            )
            
            reply = response.text if hasattr(response, 'text') else str(response)
            
            logger.info("‚úÖ Respuesta recibida de Gemini")
            
            # Extraer metadatos de uso de forma segura
            tokens_info = None
            if hasattr(response, 'usage_metadata'):
                try:
                    usage = response.usage_metadata
                    tokens_info = {
                        "prompt_tokens": getattr(usage, 'prompt_token_count', 0),
                        "candidates_tokens": getattr(usage, 'candidates_token_count', 0),
                        "total_tokens": getattr(usage, 'total_token_count', 0)
                    }
                except Exception as e:
                    logger.warning(f"No se pudo extraer usage_metadata: {e}")
            
            return {
                "model": settings.GEMINI_MODEL,
                "reply": reply,
                "is_simulated": False,
                "tokens_used": tokens_info
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error al llamar a Gemini API: {e}")
            # Fallback a modo simulaci√≥n en caso de error
            return {
                "error": f"Error al conectar con Gemini: {str(e)}",
                "model": settings.GEMINI_MODEL,
                "is_simulated": True
            }
    
    # Modo simulaci√≥n - Sin API key o SDK no disponible
    await asyncio.sleep(0.05)  # Simular latencia de red
    
    reply = (
        f"¬°Hola! Soy el simulador de ChatGPT. Has preguntado: '{prompt[:200]}'\n\n"
        "Este es un espacio de pr√°ctica donde puedes hacer cualquier pregunta o solicitud. "
        "Puedes pedirme que te ayude a escribir textos, explicarte conceptos, darte ideas, "
        "o cualquier otra cosa que se te ocurra.\n\n"
        "üí° Consejo: Formula preguntas claras y espec√≠ficas. Puedes hacer preguntas de seguimiento "
        "para profundizar en cualquier tema.\n\n"
        "üìù Nota: Est√°s en modo simulaci√≥n. Para usar respuestas reales de IA, "
        "configura GEMINI_API_KEY en el archivo .env"
    )
    
    return {
        "model": settings.GEMINI_MODEL,
        "reply": reply,
        "is_simulated": True
    }


# Base de conocimiento para RAG - Curso de IA y ChatGPT para adultos mayores
KNOWLEDGE_BASE: List[Dict[str, str]] = [
    {
        "id": "ia_intro",
        "title": "¬øQu√© es la Inteligencia Artificial?",
        "category": "fundamentos",
        "content": "La Inteligencia Artificial (IA) es la capacidad de las m√°quinas para realizar tareas que normalmente requieren inteligencia humana. Incluye aprender de experiencias, reconocer patrones, entender lenguaje natural y tomar decisiones. Ejemplos cotidianos: asistentes virtuales como Siri o Alexa, recomendaciones en Netflix, filtros de spam, reconocimiento facial en tel√©fonos."
    },
    {
        "id": "chatgpt_intro",
        "title": "¬øQu√© es ChatGPT?",
        "category": "fundamentos",
        "content": "ChatGPT es un asistente de IA desarrollado por OpenAI que puede mantener conversaciones en lenguaje natural. Puede responder preguntas, ayudar a escribir textos, explicar conceptos complicados de forma simple, generar ideas creativas, traducir textos y ayudarte a aprender paso a paso. Funciona procesando el texto que escribes y generando respuestas coherentes basadas en patrones aprendidos."
    },
    {
        "id": "chatgpt_usos",
        "title": "Usos pr√°cticos de ChatGPT",
        "category": "fundamentos",
        "content": "ChatGPT puede ayudarte con: Escritura (redactar emails, corregir ortograf√≠a, escribir cartas), Aprendizaje (explicar temas, dar ejemplos, responder preguntas paso a paso), Tareas pr√°cticas (crear listas, dar recetas adaptadas, sugerir soluciones), y Creatividad (generar ideas para regalos, escribir poemas, sugerir planes de viaje)."
    },
    {
        "id": "prompt_que_es",
        "title": "¬øQu√© es un prompt?",
        "category": "prompting",
        "content": "Un 'prompt' es la pregunta o instrucci√≥n que le das a ChatGPT. Es como cuando le pides algo a una persona: entre m√°s claro seas, mejor te entender√°. Es la forma de comunicarte con la IA para obtener las respuestas que necesitas."
    },
    {
        "id": "prompt_consejos",
        "title": "Consejos para hacer buenos prompts",
        "category": "prompting",
        "content": "Para obtener mejores respuestas: 1) S√© espec√≠fico ('dame una receta f√°cil de pasta para 2 personas' en vez de 'h√°blame de comida'), 2) Da contexto ('Soy principiante en jardiner√≠a, ¬øqu√© plantas son f√°ciles de cuidar?'), 3) Pide el formato que necesitas ('expl√≠camelo de forma sencilla', 'dame una lista con pasos'), 4) Haz preguntas de seguimiento si no entiendes algo."
    },
    {
        "id": "prompt_ejemplos",
        "title": "Ejemplos de buenos prompts",
        "category": "prompting",
        "content": "Ejemplos efectivos: 'Expl√≠came qu√© es WhatsApp como si tuviera 65 a√±os y nunca lo us√©', 'Dame 5 consejos para mantener mi computadora segura', 'Ay√∫dame a escribir un email para cancelar una suscripci√≥n', 'Resume este texto en 3 puntos principales', 'Necesito ideas de regalos para mi nieto de 10 a√±os que le gusta la ciencia'."
    },
    {
        "id": "seguridad_basica",
        "title": "Seguridad b√°sica con IA",
        "category": "seguridad",
        "content": "Consejos de seguridad al usar ChatGPT: 1) No compartas informaci√≥n personal sensible (contrase√±as, n√∫meros de tarjetas, documentos), 2) No conf√≠es ciegamente en toda la informaci√≥n - ChatGPT puede equivocarse, 3) Verifica informaci√≥n importante con otras fuentes, 4) Ten cuidado con consejos m√©dicos o legales - consulta profesionales para temas serios."
    },
    {
        "id": "seguridad_privacidad",
        "title": "Privacidad y datos personales",
        "category": "seguridad",
        "content": "Protege tu privacidad: Nunca compartas en ChatGPT tu direcci√≥n completa, n√∫mero de documento, contrase√±as, datos bancarios, informaci√≥n m√©dica personal o fotos privadas. Las conversaciones pueden ser revisadas para mejorar el servicio. Trata a ChatGPT como si fuera una conversaci√≥n en un lugar p√∫blico."
    },
    {
        "id": "seguridad_estafas",
        "title": "Cuidado con estafas relacionadas con IA",
        "category": "seguridad",
        "content": "Ten cuidado con: 1) Sitios falsos que dicen ser ChatGPT oficial y piden datos personales o pagos, 2) Emails o mensajes que dicen venir de OpenAI pidiendo informaci√≥n, 3) Ofertas 'demasiado buenas' generadas por IA, 4) Siempre usa el sitio oficial (chat.openai.com) o aplicaciones verificadas."
    },
    {
        "id": "limitaciones",
        "title": "Limitaciones de ChatGPT",
        "category": "fundamentos",
        "content": "ChatGPT tiene limitaciones importantes: 1) Su conocimiento tiene fecha de corte y no est√° actualizado en tiempo real, 2) Puede cometer errores o dar informaci√≥n incorrecta con confianza, 3) No puede acceder a internet, ver im√°genes o abrir links, 4) No tiene memoria entre sesiones diferentes, 5) No es un experto m√©dico, legal o financiero - consulta profesionales para temas importantes."
    },
    {
        "id": "curso_edad",
        "title": "ChatGPT para adultos mayores",
        "category": "curso",
        "content": "Este curso est√° dise√±ado especialmente para personas mayores de 60 a√±os que quieren aprender a usar ChatGPT. No necesitas conocimientos t√©cnicos previos. Aprender√°s a tu ritmo con ejemplos pr√°cticos y √∫tiles para tu vida diaria. El simulador te permite practicar sin presi√≥n y sin miedo a equivocarte."
    },
    {
        "id": "curso_beneficios",
        "title": "Beneficios de aprender IA a tu edad",
        "category": "curso",
        "content": "Aprender a usar ChatGPT te ayudar√° a: 1) Mantenerte actualizado con la tecnolog√≠a, 2) Comunicarte mejor por escrito, 3) Encontrar informaci√≥n r√°pidamente, 4) Ayudar a tus nietos con tareas escolares, 5) Aprender nuevas habilidades a tu ritmo, 6) Mantener tu mente activa y ejercitar la creatividad."
    },
    {
        "id": "primeros_pasos",
        "title": "Primeros pasos con ChatGPT",
        "category": "curso",
        "content": "Para empezar: 1) Practica con este simulador sin presi√≥n, 2) Empieza con preguntas simples (¬øQu√© es...? ¬øC√≥mo puedo...?), 3) Lee las respuestas con calma, 4) Haz preguntas de seguimiento si algo no queda claro, 5) No te preocupes por cometer errores - es parte del aprendizaje, 6) Experimenta y divi√©rtete aprendiendo."
    }
]


async def rag_answer(question: str) -> Dict[str, Any]:
    """Busca en la base de conocimiento y devuelve respuestas relevantes.
    Si no encuentra respuesta en el KNOWLEDGE_BASE, consulta con Gemini.
    Sistema RAG simple para preguntas frecuentes del curso.
    """
    if not question or not question.strip():
        return {"error": "La pregunta est√° vac√≠a"}

    q = question.lower()
    
    # B√∫squeda por coincidencia de palabras clave
    matches = []
    for doc in KNOWLEDGE_BASE:
        # Buscar en t√≠tulo y contenido
        if (q in doc["title"].lower() or 
            q in doc["content"].lower() or
            any(word in doc["content"].lower() for word in q.split() if len(word) > 3)):
            matches.append(doc)
    
    # Eliminar duplicados manteniendo orden
    seen = set()
    unique_matches = []
    for doc in matches:
        if doc["id"] not in seen:
            seen.add(doc["id"])
            unique_matches.append(doc)
    
    # Si hay resultados en la base de conocimiento, devolverlos
    if unique_matches:
        # Limitar a los 3 resultados m√°s relevantes
        top_matches = unique_matches[:3]
        
        # Construir respuesta combinando la informaci√≥n
        answer_parts = []
        for i, doc in enumerate(top_matches, 1):
            answer_parts.append(f"{i}. {doc['title']}\n{doc['content']}")
        
        combined_answer = "\n\n".join(answer_parts)
        
        return {
            "answer": combined_answer,
            "sources": [{"id": doc["id"], "title": doc["title"], "category": doc["category"]} for doc in top_matches],
            "total_results": len(top_matches),
            "source_type": "knowledge_base"
        }
    
    # No hay resultados en KB - intentar con Gemini
    logger.info(f"No se encontr√≥ respuesta en KB para: {question[:50]}... Consultando con Gemini")
    
    model = _initialize_gemini()
    
    if model is not None:
        try:
            # Usar Gemini como fallback con contexto del curso
            enhanced_question = f"""Eres un instructor de un curso sobre inteligencia artificial y ChatGPT para adultos mayores (+60 a√±os).

La pregunta es sobre el curso o temas relacionados con IA, ChatGPT, prompting o seguridad digital.

IMPORTANTE: 
- Responde de forma BREVE (m√°ximo 2-3 p√°rrafos)
- Usa lenguaje SIMPLE y CLARO, sin tecnicismos
- Si usas t√©rminos t√©cnicos, expl√≠calos con ejemplos cotidianos
- Enf√≥cate en aplicaciones pr√°cticas para adultos mayores

Pregunta:
{question}"""
            
            logger.info(f"Consultando Gemini para RAG: {question[:30]}...")
            
            response = await asyncio.to_thread(
                lambda: model.generate_content(enhanced_question)
            )
            
            reply = response.text if hasattr(response, 'text') else str(response)
            
            logger.info("‚úÖ Respuesta RAG recibida de Gemini")
            
            return {
                "answer": reply,
                "sources": [],
                "total_results": 1,
                "source_type": "gemini_ai"
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error al consultar Gemini para RAG: {e}")
            return {
                "answer": f"No encontr√© informaci√≥n espec√≠fica en nuestra base de conocimiento y ocurri√≥ un error al consultar con la IA: {str(e)}. Por favor, intenta reformular tu pregunta o pregunta sobre: inteligencia artificial, ChatGPT, prompts, seguridad o el curso.",
                "sources": [],
                "total_results": 0,
                "source_type": "error"
            }
    
    # Sin Gemini disponible - mensaje de fallback
    return {
        "answer": "No encontr√© informaci√≥n espec√≠fica sobre esa pregunta en nuestra base de conocimiento del curso. ¬øPodr√≠as reformular tu pregunta o preguntar sobre: inteligencia artificial, ChatGPT, prompts, seguridad o el curso?\n\nüí° Consejo: Para obtener respuestas m√°s precisas sobre temas fuera del curso, configura GEMINI_API_KEY en el archivo .env",
        "sources": [],
        "total_results": 0,
        "source_type": "not_found"
    }
